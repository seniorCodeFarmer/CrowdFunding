<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--配置ContextLoaderListener-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>
        <!--Servlet默认生命周期中，创建对象是在第一次接收请求时-->
        <!--而DispatcherServlet创建对象后有大量的框架初始化工作，不适合在第一次请求时来做-->
        <!--设置此标签就是为了让DispatcherServlet在Web应用启动时创建对象，初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--配置方式一：/ 表示拦截所有请求-->
<!--        <url-pattern>/</url-pattern>-->
        <!--配置方式二：配置请求扩展名
            优点一：xxx.css、xxx.js、xxx.png等静态资源完全不经过SpringMVC，不需要特殊处理
            优点二：可以实现伪静态效果，表面上看起来是访问HTML这样的静态资源，但是实际上是经过Java代码运算的结果
                伪静态作用1：给黑客入侵增加难度
                伪静态作用2：有利于SEO优化（让百度、谷歌这样的搜索引擎更容易找到项目
            缺点：不符合RESTFul风格
        -->
        <url-pattern>*.html</url-pattern>
        <!--为什么要另外再配置 json扩展名呢？
                如果一个Ajax请求扩展名是html，但是实际服务器给浏览器返回的json数据，二者就不匹配了，会出现406错误
                为了让Ajax请求能够顺利拿到JSON格式的响应数据，我们另外配置JSON扩展名
        -->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

</web-app>